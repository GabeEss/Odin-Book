#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const cron = require('node-cron');
const BotService = require('../bot/bot-logic');
const UsernameMigration = require('../scripts/migration-logic');
const UserCleanUp = require('../utils/cleanup/user-cleanup');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Initialize Socket.IO
 */
const initializeSocket = require('../sockets/socket');
const io = initializeSocket(server);
app.set('io', io);

/**
 * Listen on provided port, on all network interfaces. Immediately invoked function expression to initialize bots.
 */
(async () => {
  try {
    console.log("Initializing bots...");
    await BotService.initializeBots();
    console.log('Bots initialization complete.');

    console.log("Initializing welcome event...");
    await BotService.initializeWelcomeEvent();
    console.log('Welcome event initialization complete.');
    
    console.log("Handling first post on the welcome event...");
    await BotService.firstPostWelcomeEvent();
    console.log('Welcome event first post handled.');

    console.log("Handling username uniqueness migration...");
    await UsernameMigration.runMigration();
    console.log("Username migration handled.");

    console.log("Handling welcome event clean up...");
    await BotService.cleanUpWelcomeEvent();
    console.log("Welcome event clean up handled.");

    console.log("Cleaning up stale users...");
    await UserCleanUp.cleanUpStaleUsers();
    console.log("Stale user clean up handled.");
    
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (error) {
    console.error('Failed to initialize application: ', error);
    process.exit(1); // shut down
  }
})();

// Runs at 2:00am, on Jan 1st and July 1st
cron.schedule('0 2 1 1,7 *', async () => {
  console.log("Running scheduled guest user clean up...");
  try {
    await UserCleanUp.cleanUpStaleUsers();
    await BotService.cleanUpWelcomeEvent();
    console.log("Scheduled cleanup complete.");
  } catch(error) {
    console.error("Scheduled clean up failed: ", error);
  }
}, {
  scheduled: true,
  timezone: "America/New_York"
});


// Runs at 5pm every day
// cron.schedule('0 17 * * *', async () => {
//   console.log("Running scheduled guest user clean up...");
//   try {
//     await UserCleanUp.cleanUpStaleUsers();
//     await BotService.cleanUpWelcomeEvent();
//     console.log("Scheduled cleanup complete.");
//   } catch(error) {
//     console.error("Scheduled clean up failed: ", error);
//   }
// }, {
//   scheduled: true,
//   timezone: "America/New_York"
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
