#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var socketIo = require('socket.io');
const mongoose = require("mongoose");

const Message = require('../models/message');
const User = require('../models/user');
const Event = require('../models/event');
const Post = require('../models/post');
const Comment = require('../models/comment');

const cors = require('cors');
app.use(cors());

// Cache for users
const userCache = new Map();
// Socket cache for users
const socketCache = new Map();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.IO server.
 */

const io = socketIo(server, {
  cors: {
    origin: process.env.API_CLIENT || "http://localhost:5173",
    methods: ["GET", "POST"],
    credentials: true
  }
});


/// NEW CONNECTION ///
io.on('connection', (socket) => {
  console.log('New client connected: ', socket.id);

  socket.on('userJoined', async (userId) => {
    if(!userCache.has(userId)) {
      let user = await User.findOne({ userId: userId });
      if(!user) {
        console.error("User not found in database.");
        return;
      }
      userCache.set(userId, user);
      console.log("User data cached.");
    } else {
      console.log("User data exists in cache.");
    }
    socketCache.set(userId, socket.id);
    console.log("Socket cached.");
  });

  /// USE THE MONGO _ID FOR CHATROOMS ///
  /// USER JOINS MESSAGE CHATROOM ///
  socket.on("userJoinsMessageChat", async (recipientId, userId) => {
    console.log("User joins message chat.")
    let user = userCache.get(userId);
    if (!user) {
      user = await User.findOne({ userId: userId });
    }
    // Sort the ids so the chatroom ID will be the same regardless of who is logged in
    const chatroomId = [recipientId, user._id].sort().join('-');
    console.log(chatroomId);
    socket.join(`message-${chatroomId}`);
  })

  /// USER LEAVES MESSAGE CHATROOM ///
  socket.on("userLeavesMessageChat", async(recipientId, userId) => {
    console.log("User leaves message chat.");
    let user = await userCache.get(userId);
    if (!user) {
      user = await User.findOne({ userId: userId });   
    }
    // Sort the ids so the chatroom ID will be the same regardless of who is logged in
    const chatroomId = [recipientId, user._id].sort().join('-');
    socket.join(`message-${chatroomId}`);
  })

  /// USER JOINS POSTED-TO CHATROOM ///
  socket.on('userJoinsPostedTo', async (postedToId) => {
    socket.join(`postedTo-${postedToId}`);
  });

  /// USER LEAVES POSTED-TO CHATROOM ///
  socket.on('userLeavesPostedTo', async (postedToId) => {
    socket.leave(`postedTo-${postedToId}`);
  });

  /// USER JOINS A SPECIFIC POST CHATROOM ///
  socket.on('userJoinsPost', async (postId) => {
    socket.join(`post-${postId}`);
  });

  /// USER LEAVES A SPECIFIC POST CHATROOM ///
  socket.on('userLeavesPost', async (postId) => {
    socket.leave(`post-${postId}`);
  });

  /// SEND MESSAGE ///
  socket.on('sendMessage', async (data) => {
    try {
      let sender;
      if (userCache.has(data.from)) {
        sender = userCache.get(data.from);
      } else {
          // The user is not in the cache, check the userId in the database
          let user = await User.findOne({ userId: data.from });
          if (!user) {
              console.error("Sender user not found in database:", data.from);
              return;
          }
          sender = user;
          userCache.set(data.from, user);
      }

      // Get the recipient user
      let receiver = await User.findOne({ _id: data.to });
      if (!receiver) {
        console.error("Receiver user not found in database:", data.to);
        return;
      }

      if(!data.message) {
        console.error("Invalid message data.");
        return;
      }

      // Store message in database
      const message = new Message({
        sender: sender,
        receiver: receiver,
        message: data.message,
        timestamp: new Date(),
      });

      try {
          await message.save();
          console.log("Message inserted");

          const chatroomId = [receiver._id, sender._id].sort().join('-');
          // Send to all users
          io.to('message-' + chatroomId).emit('message', message);
      } catch (err) {
          console.error("Error inserting message:", err);
      }
    } catch (error) {
      console.error("Error handling 'sendMessage' event:", error);
    }
  });

  // SEND POST ///
  socket.on('sendPost', async (data) => {
    try {
      let sender;
      if (userCache.has(data.from)) {
        sender = userCache.get(data.from);
      } else {
          // The user is not in the cache, check the userId in the database
          let user = await User.findOne({ userId: data.from });
          if (!user) {
              console.error("Sender user not found in database:", data.from);
              return;
          }
          sender = user;
          userCache.set(data.from, user);
      }

      // Get the recipient user/event
      let receivingModel = 'User';
      let receiver = await User.findOne({ _id: data.to });
      if (!receiver) {
        receivingModel = 'Event';
        receiver = await Event.findOne({ _id: data.to });
        if(!receiver) {
          console.error("Receiver user/event not found in database:", data.to);
          return;
        }
      }

      if(!data.post) {
        console.error("Invalid post data.");
        return;
      }

      const post = new Post({
        post: data.post,
        owner: sender,
        posted_to: { id: data.to, model: receivingModel },
        date_created: new Date(),
        comments: [],
        likes: [],
      });

      try {
          await post.save();
          console.log("Post inserted");

          // Send to all users
          io.to('postedTo-' + data.to).emit('post', post);
      } catch (err) {
          console.error("Error inserting post:", err);
      }
    } catch (error) {
      console.error("Error handling 'sendPost' event:", error);
    }
  });

  // SEND COMMENT ///
  socket.on('sendComment', async (data) => {
    try {
      let sender;
      if (userCache.has(data.from)) {
        sender = userCache.get(data.from);
      } else {
          // The user is not in the cache, check the userId in the database
          let user = await User.findOne({ userId: data.from });
          if (!user) {
              console.error("Sender user not found in database:", data.from);
              return;
          }
          sender = user;
          userCache.set(data.from, user);
      }

      let post = await Post.findOne({ _id: data.to });

      if(!post) {
        console.error("Post not found in database:", data.to);
        return;
      }

      if(!data.comment) {
        console.error("Invalid comment data.");
        return;
      }

      const comment = new Comment({
        comment: data.comment,
        owner: sender,
        post: post,
        date_created: new Date(),
        likes: [],
      });

      try {
        await Post.updateOne(
          { _id: post },
          { $push: { comments: comment._id }}
        );
        await comment.save();
        console.log("Comment inserted");

        // Send to all users
        io.to('post-' + data.to).emit('comment', comment);
      } catch (err) {
        console.error("Error inserting comment:", err);
      }
    } catch (error) {
      console.error("Error handling 'sendComment' event:", error);
    }
  })

  /// EDIT POST ///
  socket.on('editPost', async(data) => {
    try {
      const post = await Post.findById(data.post).populate('owner').populate('likes');
      if(!post) {
        console.error("Post not found:", data.post); 
        return;
      }

      post.post = data.content;
      await post.save();

      io.to('postedTo-' + data.to).emit('editPost', post);
    } catch(error) {
      console.error("Error handling 'editPost' event:", error);
    }
  })

  /// DELETE POST ///
  socket.on('deletePost', async (data) => {
    const session = await mongoose.startSession();
    session.startTransaction();
    try {
      const post = await Post.findById(data.post);
      if(!post) {
        console.error('Post not found:', data.post);
        return;
      }
      await Comment.deleteMany({ post: data.post}, {session:session});
      await post.deleteOne({ _id: data.post }, {session:session});
      await session.commitTransaction();
      console.log("Deletion complete. Emit to socket.");
      io.to('postedTo-' + data.to).emit('deletePost', data.post);
    } catch (error) {
      console.error('Error deleting post:', error);
    }
  })

  /// DELETE COMMNET ///
  socket.on('deleteComment', async (data) => {
    const session = await mongoose.startSession();
    session.startTransaction();
    try {
      const comment = await Comment.findById(data.comment);
      if(!comment) {
        console.error('Comment not found:', data.comment);
        return;
      }

      // Find the post
      const post = await Post.findOne({ _id: data.to });
      if (!post) {
          console.error('Post not found for comment:', data.to);
          return;
      }
      
      // Remove comment from comments array in the post
      post.comments = post.comments.filter(id => id.toString() !== data.comment);

      await post.save({session});
      await comment.deleteOne({ _id: data.comment }, {session});
      await session.commitTransaction();
      console.log("Comment deleted.");
      io.to('post-' + post._id).emit('deleteComment', comment);
    } catch (error) {
      await session.abortTransaction();
      console.error('Error deleting comment:', error);
    } finally {
      session.endSession();
    }
  })

  /// USER LEAVES OR DISCONNECTS ///

  socket.on('userLeft', (userId) => {
    userCache.delete(userId);
    socketCache.delete(userId);
    console.log('User left.');
  });

  socket.on('disconnect', () => {
    console.log('Client disconnected');

    // Find the user associated with the disconnected socket and remove them from the caches
    for (let [userId, socketId] of socketCache.entries()) {
      if (socketId === socket.id) {
        userCache.delete(userId);
        socketCache.delete(userId);
        console.log('User left');
        break;
      }
    }
  });

  socket.on('error', (error) => {
    console.error('An error occurred with the socket:', error);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
